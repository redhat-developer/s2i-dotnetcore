#!/bin/bash

set -e

# User settable environment
DOTNET_CONFIGURATION="${DOTNET_CONFIGURATION:-Release}"
DOTNET_STARTUP_PROJECT="${DOTNET_STARTUP_PROJECT:-.}"

# Private environment
DOTNET_FRAMEWORK="netcoreapp1.1"

# npm
if [ -n "${DOTNET_NPM_TOOLS}" ]; then
  echo "---> Installing npm tools ..."
  pushd $HOME
  npm install ${DOTNET_NPM_TOOLS}
  popd
fi

# project.json defaults to naming the assembly the same as the folder
if [ -n "$DOTNET_ASSEMBLY_NAME" ]; then
  mkdir "$DOTNET_ASSEMBLY_NAME"
  cd "$DOTNET_ASSEMBLY_NAME"
fi

echo "---> Copying application source ..."
cp -Rf /tmp/src/. ./

# output assembly name
if [ -n "$DOTNET_ASSEMBLY_NAME" ]; then
  APP_DLL_NAME="${DOTNET_ASSEMBLY_NAME}.dll"
else
  APP_DLL_NAME="$(basename "$(realpath "${DOTNET_STARTUP_PROJECT}")").dll"
fi

# Build nuget sources list for when doing the restore
RESTORE_OPTIONS=""
for SOURCE in $DOTNET_RESTORE_SOURCES; do
  RESTORE_OPTIONS="$RESTORE_OPTIONS --source $SOURCE"
done

echo "---> Installing dependencies ..."
dotnet restore $RESTORE_OPTIONS

# The publish operation fails when .NET framework targets are included in project.json
# See https://github.com/dotnet/cli/issues/3636
# This bug won't be fixed for project.json, workaround:
export DOTNET_REFERENCE_ASSEMBLIES_PATH=/tmp/reference_assemblies
mkdir -p $DOTNET_REFERENCE_ASSEMBLIES_PATH/.NETFramework/{v1.1,v2.0,v3.5,v4.0,v4.0.3,v4.5,v4.5.1,v4.5.2,v4.6,v4.6.1,v4.6.2}

# run tests
for TEST_PROJECT in $DOTNET_TEST_PROJECTS; do
    echo "---> Running test project: $TEST_PROJECT..."
    dotnet test "$TEST_PROJECT" -f "$DOTNET_FRAMEWORK"
done

if [ "$DOTNET_PUBLISH" == "true" ]; then
  # publish application
  echo "---> Publishing application ..."
  dotnet publish -f "$DOTNET_FRAMEWORK" -c "$DOTNET_CONFIGURATION" "$DOTNET_STARTUP_PROJECT" -o "$DOTNET_PUBLISH_PATH"

  # check if the assembly used by the script exists
  if [ ! -f "$DOTNET_PUBLISH_PATH/${APP_DLL_NAME}" ]; then
    echo "error: Build output does not contain entrypoint assembly: ${APP_DLL_NAME}"
    exit 1
  fi

  # Create run script in publish folder
  cat << EOF >"$DOTNET_RUN_SCRIPT"
#!/bin/bash
exec dotnet ${APP_DLL_NAME} \$@
EOF
  chmod +x "$DOTNET_RUN_SCRIPT"
else
  # build application
  echo "---> Building application ..."
  dotnet build -f "$DOTNET_FRAMEWORK" -c "$DOTNET_CONFIGURATION" "$DOTNET_STARTUP_PROJECT"
fi

# cleanup
rm -rf $DOTNET_REFERENCE_ASSEMBLIES_PATH

# Fix source directory permissions
fix-permissions ./
# set permissions for any installed artifacts
fix-permissions /opt/app-root
