#!/bin/bash

set -e
# Include filenames beginning with a '.' when installing the application source code.
shopt -s dotglob

if [ -n "${DOTNET_VERBOSITY}" ]; then
  echo "---> Environment:"
  env | sort
  VERBOSITY_OPTION="-v ${DOTNET_VERBOSITY}"
else
  VERBOSITY_OPTION=""
fi

echo "---> Installing application source..."
if [ -d /tmp/src ]; then
  mv /tmp/src/* ./
fi

# sdk version
DOTNET_SDK_VERSION="${DOTNET_SDK_VERSION:-$DOTNET_SDK_BASE_VERSION}"
if [ "$DOTNET_SDK_VERSION" != "latest" ]; then
cat >../global.json <<EOF
{
  "sdk": {
    "version": "$DOTNET_SDK_VERSION"
  }
}
EOF
fi
echo "Using SDK: $(dotnet --version)"

# Trust certificates from all DOTNET_SSL_DIRS.
# Store them in the DOTNET_SSL_CERT_DIR which is picked up by the container-entrypoint.
if [ -n "$DOTNET_SSL_DIRS" ]; then

  # Append SSL_CERT_DIR to DOTNET_SSL_DIRS.
  # If SSL_CERT_DIR is unset, use the default location.
  if [ -z ${SSL_CERT_DIR+x} ]; then
    SSL_CERT_DIR=/etc/pki/tls/certs
  fi
  DOTNET_SSL_DIRS="$DOTNET_SSL_DIRS $SSL_CERT_DIR"

  # Create certificate folder.
  mkdir "$DOTNET_SSL_CERT_DIR"

  # Populate it with certificates.
  CERT_ID=0
  for SSL_DIR in $DOTNET_SSL_DIRS; do
    # Ignore non-existing directories.
    if [ -d "$SSL_DIR" ]; then
      # Copy the file when it is in the src folder so it can't get removed by DOTNET_RM_SRC.
      # Create symbolic links for files in other folders.
      CERTFILES=(`find -L "$SSL_DIR" -maxdepth 1 -type f -exec realpath {} \;`)
      for CERT_FILE in ${CERTFILES[@]}
      do
        if [[ "$CERT_FILE" =~ ^/opt/app-root/src/* ]]; then
          cp "$CERT_FILE" "$DOTNET_SSL_CERT_DIR/_s2i$CERT_ID"
        else
          ln -s "$CERT_FILE" "$DOTNET_SSL_CERT_DIR/_s2i$CERT_ID"
        fi
        CERT_ID=$((CERT_ID + 1))
      done
    fi
  done

  # Use the certificate folder.
  export SSL_CERT_DIR="$DOTNET_SSL_CERT_DIR"
fi

# npm
if [ -n "${DOTNET_NPM_TOOLS}" ]; then
  echo "---> Installing npm tools..."

  if [ ! -z $HTTP_PROXY ]; then
    echo "---> Setting npm http proxy"
    npm config set proxy $HTTP_PROXY
  fi
  if [ ! -z $HTTPS_PROXY ]; then
    echo "---> Setting npm https proxy"
    npm config set https-proxy $HTTPS_PROXY
  fi
  if [ ! -z $NPM_MIRROR ]; then
    echo "---> Setting npm mirror"
    npm config set registry $NPM_MIRROR
  fi

  pushd $HOME
  npm install ${DOTNET_NPM_TOOLS}
  popd
fi

# dotnet tools
if [ -n "${DOTNET_TOOLS}" ]; then
  # Build nuget sources list for when doing the restore
  TOOL_RESTORE_OPTIONS=""
  if [ -n "${DOTNET_RESTORE_SOURCES}" ]; then
    # `dotnet tool install` doesn't have a `--source` parameter that behaves like
    # `dotnet restore` (i.e. replacing vs adding sources). We generate a config file
    # to have the same behavior.
    cat >/tmp/ignore-global-nuget-sources <<EOF
<?xml version="1.0" encoding="utf-8"?>
<configuration>
 <packageSources>
    <clear />
 </packageSources>
</configuration>
EOF
    TOOL_RESTORE_OPTIONS="--configfile /tmp/ignore-global-nuget-sources"
    for SOURCE in $DOTNET_RESTORE_SOURCES; do
      TOOL_RESTORE_OPTIONS="$TOOL_RESTORE_OPTIONS --add-source $SOURCE"
    done
  fi

  for DOTNET_TOOL in $DOTNET_TOOLS; do
    # Split the tool by '@' and treat the second part as the version if there is one.
    DOTNET_TOOL_SPLIT=(${DOTNET_TOOL//@/ })
    DOTNET_TOOL_NAME=${DOTNET_TOOL_SPLIT[0]}
    if [ ${#DOTNET_TOOL_SPLIT[@]} -eq 1 ]; then
      DOTNET_TOOL_VERSION_OPTION=""
    else
      DOTNET_TOOL_VERSION_OPTION="--version ${DOTNET_TOOL_SPLIT[1]}"
    fi
    dotnet tool install -g $VERBOSITY_OPTION $TOOL_RESTORE_OPTIONS $DOTNET_TOOL_VERSION_OPTION $DOTNET_TOOL_NAME
  done
fi

if [ "$DEV_MODE" == true ]; then
  # fix permissions
  fix-permissions /opt/app-root

  exit 0
fi

# User settable environment
DOTNET_CONFIGURATION="${DOTNET_CONFIGURATION:-Release}"
DOTNET_STARTUP_PROJECT="${DOTNET_STARTUP_PROJECT:-.}"

# Ensure there is a project file and derive assembly name from project name.
PROJFILES=(`find "${DOTNET_STARTUP_PROJECT}" -maxdepth 1 -name "*.??proj"`)
if [ ${#PROJFILES[@]} -eq 1 ]; then
  PROJFILE=$(basename ${PROJFILES[0]})
  APP_DLL_NAME="${PROJFILE: : -7}.dll"
else
  if [ ${#PROJFILES[@]} -eq 0 ]; then
    echo "error: DOTNET_STARTUP_PROJECT has no project file"
  else
    echo "error: DOTNET_STARTUP_PROJECT contains multiple project files"
  fi
  echo "You can specify the startup project by adding an '.s2i/environment' file to the source repository."
  # find all projects and strip leading './'
  PROJFILES=(`find -name "*.??proj" | sed "s|^\./||"`)
  if [ ${#PROJFILES[@]} -eq 0 ]; then
    echo "The source repository has no project files."
  else
    echo "The source repository contains the following projects:"
    for PROJFILE in ${PROJFILES[@]}; do
      echo "- ${PROJFILE}"
    done
    echo "Update the '.s2i/environment' file to specify the project you want to publish, for example DOTNET_STARTUP_PROJECT=${PROJFILES[0]}".
  fi
  exit 1
fi

# Override assembly name
if [ -n "$DOTNET_ASSEMBLY_NAME" ]; then
  APP_DLL_NAME="${DOTNET_ASSEMBLY_NAME}.dll"
fi

# Build nuget sources list for when doing the restore
RESTORE_OPTIONS=""
for SOURCE in $DOTNET_RESTORE_SOURCES; do
  RESTORE_OPTIONS="$RESTORE_OPTIONS --source $SOURCE"
done

# run tests
for TEST_PROJECT in $DOTNET_TEST_PROJECTS; do
    echo "---> Restoring test project ($TEST_PROJECT) dependencies..."
    dotnet restore "$TEST_PROJECT" $RESTORE_OPTIONS $VERBOSITY_OPTION
    echo "---> Running test project: $TEST_PROJECT..."
    dotnet test "$TEST_PROJECT" -f "$DOTNET_FRAMEWORK" $VERBOSITY_OPTION
done

# publish application
echo "---> Restoring application dependencies..."
dotnet restore "$DOTNET_STARTUP_PROJECT" $RESTORE_OPTIONS $VERBOSITY_OPTION
echo "---> Publishing application..."
dotnet publish "$DOTNET_STARTUP_PROJECT" -f "$DOTNET_FRAMEWORK" -c "$DOTNET_CONFIGURATION" $VERBOSITY_OPTION \
       --self-contained false /p:PublishWithAspNetCoreTargetManifest=false -o "$DOTNET_APP_PATH"

# check if the assembly used by the script exists
if [ ! -f "$DOTNET_APP_PATH/${APP_DLL_NAME}" ]; then
  echo "error: Build output does not contain entrypoint assembly: ${APP_DLL_NAME}"
  exit 1
fi

# Create run script in publish folder
cat << EOF >"$DOTNET_APP_PATH/$DOTNET_DEFAULT_CMD"
#!/bin/bash

exec dotnet ${APP_DLL_NAME} \$@
EOF
chmod +x "$DOTNET_APP_PATH/$DOTNET_DEFAULT_CMD"

if [ "$DOTNET_PACK" == "true" ]; then
  echo "---> Packing application..."
  fix-permissions $DOTNET_APP_PATH
  tar -czf /opt/app-root/app.tar.gz -C $DOTNET_APP_PATH .
fi

# cleanup NuGet artifacts
rm -rf ~/{.local,.nuget}

if [ "$DOTNET_RM_SRC" == "true" ]; then
  echo "---> Removing sources..."
  rm -rf /opt/app-root/src/*
fi

# fix permissions
fix-permissions /opt/app-root