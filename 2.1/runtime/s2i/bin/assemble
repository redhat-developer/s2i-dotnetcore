#!/bin/bash

set -e
# Include filenames beginning with a '.' when installing the application.
shopt -s dotglob

echo "---> Installing application..."
if [ -d /tmp/src ]; then
  mv /tmp/src/* "$DOTNET_APP_PATH"
fi
cd "$DOTNET_APP_PATH"

# determine DOTNET_STARTUP_ASSEMBLY
if [ -n "${DOTNET_STARTUP_ASSEMBLY}" ]; then
  if [ ! -f "${DOTNET_STARTUP_ASSEMBLY}" ]; then
    echo "error: application does not contain DOTNET_STARTUP_ASSEMBLY: ${DOTNET_STARTUP_ASSEMBLY}"
    exit 1
  fi
else
  # determine entrypoint assembly based on *.runtimeconfig.json files
  RUNTIMECFGFILES=(`find -maxdepth 1 -name "*.runtimeconfig.json"`)
  if [ ${#RUNTIMECFGFILES[@]} -eq 1 ]; then
    DOTNET_STARTUP_ASSEMBLY="${RUNTIMECFGFILES[0]: : -19}.dll"
  elif [ ${#RUNTIMECFGFILES[@]} -gt 1 ]; then
    echo "error: application contains multiple startup assemblies"
    echo "You can select the startup assembly by specifying DOTNET_STARTUP_ASSEMBLY."
    exit 1
  else
    echo "error: cannot find startup assembly"
    echo "This image does not contain an sdk and can only be used with pre-built applications."
    echo "If your startup assembly is not in the root folder, you can specify it using DOTNET_STARTUP_ASSEMBLY."
    echo "If you want to build an application, you must use the sdk image instead."
    exit 1
  fi
fi

echo "Using pre-built application with entrypoint assembly: ${DOTNET_STARTUP_ASSEMBLY}"

APP_DLL_NAME="${DOTNET_STARTUP_ASSEMBLY}"
# check if the assembly used by the script exists
if [ ! -f "$DOTNET_APP_PATH/${APP_DLL_NAME}" ]; then
  echo "error: application does not contain entrypoint assembly: ${APP_DLL_NAME}"
  exit 1
fi

# Create run script in publish folder
cat << EOF >"$DOTNET_APP_PATH/$DOTNET_DEFAULT_CMD"
#!/bin/bash

exec dotnet ${APP_DLL_NAME} \$@
EOF
chmod +x "$DOTNET_APP_PATH/$DOTNET_DEFAULT_CMD"

# fix permissions
fix-permissions /opt/app-root
