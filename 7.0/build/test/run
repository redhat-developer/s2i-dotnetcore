#!/bin/bash
#
# The 'run' script performs simple tests that verifies usability
# of the image
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
#
# OPENSHIFT_ONLY environment variable, if 'true', only tests features used by
# OpenShift's try-it feature.
#
# TEST_PORT specifies the port on the docker host to be used for testing.
# The container application will still use 8080, but this port will be bound
# to the running container when testing asp.net projects.
#
# DEBUG environment variable, if not empty, makes 'run' to log every step
# of testing.
#
# STOP_ON_ERROR determines if the tests should exit on encountering
# the first error, or keep going and list all failed tests at the end.
# Defaults to 'true', can be set to 'false'.
#
# SKIP_VERSION_CHECK environment variable, if 'true', versions are not checked.
#
# Example usage: $ sudo ./test/run


STOP_ON_ERROR=${STOP_ON_ERROR:-true}

IMAGE_OS=${IMAGE_OS:-RHEL8}

if [ "$IMAGE_OS" = "RHEL8" ]; then
  IMAGE_NAME=${IMAGE_NAME:-ubi8/dotnet-70}
  RUNTIME_IMAGE_NAME=${RUNTIME_IMAGE_NAME:-ubi8/dotnet-70-runtime}
elif [ "$IMAGE_OS" = "FEDORA" ]; then
  IMAGE_NAME=${IMAGE_NAME:-fedora/dotnet-70}
  RUNTIME_IMAGE_NAME=${RUNTIME_IMAGE_NAME:-fedora/dotnet-70-runtime}
fi
OPENSHIFT_ONLY=${OPENSHIFT_ONLY:-false}

test_dir="$(readlink -f "$(dirname "${BASH_SOURCE[0]}")")"
source "${test_dir}/testcommon"

if [ "$IMAGE_OS" = "RHEL8" ]; then
# sdk version supported on RHEL8
sdk_version=7.0.102
npm_version=8.19.2
elif [ "$IMAGE_OS" = "FEDORA" ]; then
# sdk version supported on Fedora
sdk_version=7.0.102
npm_version=8.15.0
fi

sample_app_url="https://github.com/redhat-developer/s2i-dotnetcore-ex.git"

s2i_build_and_run() {
  local app="$1"

  local image=$(s2i_build ${app})
  local output=$(docker_run ${image})
  docker_rmi ${image}

  echo "$output"
}

test_s2i_usage_projfile()
{
  # startup_project_not_found contains two project files
  # but doesn't set DOTNET_STARTUP_PROJECT to select one.
  local app=startup_project_not_found

  # build image
  local image=$(s2i_image_tag ${app})
  local s2i_build=$(s2i_build_output_log ${app} ${image})
  # cleanup
  docker_rmi ${image}

  # verify usage instructions
  local expected="error: DOTNET_STARTUP_PROJECT has no project file
You can specify the startup project by adding an '.s2i/environment' file to the source repository.
The source repository contains the following projects:
- proj1/proj1.csproj
- proj2/proj2.fsproj
Update the '.s2i/environment' file to specify the project you want to publish, for example DOTNET_STARTUP_PROJECT=proj1/proj1.csproj."
  assert_contains_multiline "${s2i_build}" "${expected}"
}

test_s2i_usage() {
  local output=$(s2i_usage ${IMAGE_NAME} 2>&1)

  # s2i usage refers to the sample app
  assert_contains "$output" "${sample_app_url}"
}

test_usage() {
  test_start

  test_s2i_usage
  test_s2i_usage_projfile
}

test_default_cmd() {
  test_start

  # verify the default command is bash.
  local container=$(docker_run_withargs $IMAGE_NAME -td) # use '-t' to stop bash from exiting.
  local processes=$(docker top $container)
  # cleanup
  docker_rm ${container}

  # Ensure there is a single bash process.
  #  The output of 'docker top' looks like
  #      USER        PID         PPID        %CPU        ELAPSED           TTY         TIME        COMMAND
  #      root        1           0           0.000       16m30.479579703s  pts/0       0s          /bin/bash
  assert_equal $(echo "$processes" | wc -l) "2"
  assert_contains_multiline "$processes" "/bin/bash"
}

test_image() {
  test_start

  # verify dotnet is available
  local image_dotnet_version=$(docker_run ${IMAGE_NAME} 'dotnet --version')
  if [ "$SKIP_VERSION_CHECK" != "true" ]; then
    assert_equal "${image_dotnet_version}" "${sdk_version}"
  fi

  # Verify $HOME != $CWD. See https://github.com/redhat-developer/s2i-dotnetcore/issues/28
  local working_dir=$(docker_run ${IMAGE_NAME} pwd)
  assert_equal "${working_dir}" "/opt/app-root/src"
  local env=$(docker_run ${IMAGE_NAME} env)
  assert_contains "${env}" "HOME=/opt/app-root$"

  # Verify the `dotnet watch` command can detect file changes in the container.
  assert_contains "${env}" "DOTNET_USE_POLLING_FILE_WATCHER=true$"

  # verify npm is available
  local image_npm_version=$(docker_run ${IMAGE_NAME} 'npm --version')
  if [ "$SKIP_VERSION_CHECK" != "true" ]; then
    assert_equal "${image_npm_version}" "${npm_version}"
  fi

  # verify no 'Welcome' message appears, due to running first time actions in build Dockerfile.
  local dotnet_help=$(docker_run ${IMAGE_NAME} 'dotnet help')
  assert_not_contains "${dotnet_help}" "Welcome"

  # Certificate folders created by the 1001 user are not accepted by .NET
  # when the image runs on OpenShift as another user.
  # Ensure there are no certificate store folders.
  # This also ensures the image doesn't include an ASP.NET Core developer certificate.
  local certificate_stores=$(docker run --rm ${IMAGE_NAME} stat /opt/app-root/.dotnet/corefx/cryptography/x509stores 2>&1)
  assert_contains "${certificate_stores}" "No such file or directory"
}

test_consoleapp() {
  test_start

  # helloworld is a C# console application

  # application returns expected output
  assert_contains "$(s2i_build_and_run helloworld)" "Hello World!"
}

test_multiframework() {
  test_start

  # hw_framework_config targets both: net451 and netcoreapp
  # this test verifies we are building and able to run the .NET target.

  # application returns expected output
  assert_contains "$(s2i_build_and_run hw_framework_config)" "Hello World!"
}

test_fsharp() {
  test_start

  # helloworld-fs is an F# console application

  # application returns expected output
  assert_contains "$(s2i_build_and_run helloworld-fs)" "Hello World from F#!"
}

test_vb() {
  test_start

  # helloworld-vb is a VB console application

  # application returns expected output
  assert_contains "$(s2i_build_and_run helloworld-vb)" "Hello World from VB!"
}

test_published_files() {
  test_start

  # qotd has an appsettings.json and quotes.txt files that must
  # be published with the app and found at runtime.

  # application returns expected output
  assert_contains "$(s2i_build_and_run qotd)" "QOTD"
}

test_aspnetapp() {
  test_start

  # asp-net-hello-world is an ASP.NET Core application

  local app=asp-net-hello-world
  # build image
  local image=$(s2i_build ${app})
  # start container
  local container=$(docker_run_d ${image})
  local url=$(container_url ${container})
  # request
  local response_base=$(curl_retry ${url}/)
  local response_file=$(curl_retry ${url}/TextFile.txt)
  local pid1_process=$(docker_exec ${container} /bin/bash -c 'ps --no-headers -o args 1')
  # cleanup
  docker_rm ${container}
  docker_rmi ${image}

  # Check response by ASP.NET pipeline
  assert_equal "${response_base}" "Hello world"
  # Check response by file middleware
  assert_equal "${response_file}" "A text file."
  # Verify dotnet runs as PID 1
  assert_equal "${pid1_process}" "dotnet asp-net-hello-world.dll"
}

test_user() {
  test_start

  local app=asp-net-hello-world
  # user to run the app (30002) is different than user that built the app (1001).
  local run_user=30002

  # build image
  local image=$(s2i_build ${app})
  # get username
  if [ "$USING_PODMAN" ]; then
    # podman adds a user to /etc/passwd which, and generate_container_user adds another.
    # because the podman user is first in the file, it is returned by 'whoami'.
    # We verify a wrapped passwd file exists and that it contains the generate_container_user user.
    local wrapped_passwd=$(docker_run_as $IMAGE_NAME $run_user cat /opt/app-root/etc/passwd)
  else
    local username=$(docker_run_as ${image} ${run_user} whoami)
  fi
  # start container
  local container=$(docker_run_as_d ${image} ${run_user})
  local url=$(container_url ${container})
  # request
  local response=$(curl_retry ${url}/)
  # cleanup
  docker_rm ${container}
  docker_rmi ${image}
  docker_rmi ${image}-as-${run_user} # image created on podman systems by docker_run_as_d

  if [ "$USING_PODMAN" ]; then
    assert_contains "$wrapped_passwd" "default:x:$run_user:0:Default Application User:/opt/app-root:/sbin/nologin"
  else
    assert_equal "${username}" "default"
  fi
  # app is working
  assert_equal "${response}" "Hello world"
}

test_template()
{
  local template=$1
  info " template: $template"

  # newweb creates instantiates the 'dotnet new mvc' template
  # in the assemble script.
  local app=newtemplate
  # build image
  local image=$(s2i_build ${app} -e TEMPLATE=$template)
  # start container
  local container=$(docker_run_d ${image})
  local url=$(container_url ${container})
  # request
  local response=$(curl_retry ${url}/)
  # cleanup
  docker_rm ${container}
  docker_rmi ${image}

  # app is working
  assert_contains "${response}" "html"
}

test_templates() {
  test_start

  # mvc is a pure ASP.NET Core MVC web application
  # angular and reactredux include a front-end which is built using npm packages.
  local templates=(mvc react angular)
  for template in ${templates[@]}; do
    test_template $template
  done
}

test_config_configuration() {
  # DOTNET_CONFIGURATION=Debug
  assert_contains "$(s2i_build_and_run dotnet-configuration-debug)" "Debug"
  # DOTNET_CONFIGURATION=Release
  assert_contains "$(s2i_build_and_run dotnet-configuration-release)" "Release"
}

test_config_1() {
  # groups envvar tests which are performed against asp-net-hello-world-envvar

  local app=asp-net-hello-world-envvar
  # build image
  local image=$(s2i_image_tag ${app})
  local s2i_build=$(s2i_build_output_log ${app} ${image})
  # find gulp and packed all
  local watch_path=$(docker_run ${image} bash -c "command -v dotnet-symbol")
  local dotnetrpm_path=$(docker_run ${image} bash -c "command -v dotnet-rpm")
  local packed_app=$(docker_run ${image} ls /opt/app-root/app.tar.gz)
  local src_folder_content=$(docker_run ${image} ls -a /opt/app-root/src)
  # ;true is there because 'npm ls' can error, for some random reason
  local npm_packages=$(docker_run ${image} bash -c "npm ls; true")
  # start container
  local container=$(docker_run_d ${image})
  local url=$(container_url ${container})
  # request
  local response=$(curl_retry ${url}/)
  local container_log=$(docker logs ${container})
  # cleanup
  docker_rm ${container}
  docker_rmi ${image}

  # DOTNET_STARTUP_PROJECT=src/app
  assert_equal "${response}" "Hello world"
  # DOTNET_TEST_PROJECTS=test/test1 test/test2
  assert_contains "${s2i_build}" "Test run for /opt/app-root/src/test/test1"
  assert_contains "${s2i_build}" "Test run for /opt/app-root/src/test/test2"
  # DOTNET_ASSEMBLY_NAME=SampleApp
  assert_contains "${s2i_build}" "/opt/app-root/src/src/app/bin/Debug/net7.0/SampleApp.dll"
  # DOTNET_RESTORE_SOURCES=https://api.nuget.org/v3/index.json https://www.myget.org/F/s2i-dotnetcore
  assert_contains "${s2i_build}" 'Restored /opt/app-root/src/src/app/app.csproj \([^)]+\)\.' # Includes S2iDotNetCoreDummy from myget.org.
  # DOTNET_PACK=true
  assert_contains "${s2i_build}" "Packing application..."
  assert_equal "${packed_app}" "/opt/app-root/app.tar.gz"
  # DOTNET_NPM_TOOLS=gulp
  assert_contains "${npm_packages}" "gulp@"
  # DOTNET_TOOLS=dotnet-symbol@1.0.5 dotnet-serve
  assert_equal "${watch_path}" "/opt/app-root/.dotnet/tools/dotnet-symbol"
  assert_equal "${dotnetrpm_path}" "/opt/app-root/.dotnet/tools/dotnet-rpm"
  assert_contains "${s2i_build}" "Tool 'dotnet-symbol' \(version '1.0.5'\) was successfully installed."
  # DOTNET_RM_SRC=true
  # The application folder contains a file and folder that starts with a '.', we verify that *all* files are removed.
  assert_contains "${s2i_build}" "Removing sources..."
  assert_not_contains "${src_folder_content}" "[^.]"
  # DOTNET_INFO=true
  assert_contains "${s2i_build}" ".NET information:"
  assert_contains "${s2i_build}" "Heap Size:"
  assert_contains "${container_log}" ".NET information:"
  assert_contains "${container_log}" "Heap Size:"
}

test_config_2() {
  # groups envvar tests which are performed against asp-net-hello-world-envvar2

  local app=asp-net-hello-world-envvar2
  # build image
  local image=$(s2i_image_tag ${app})
  local s2i_build=$(s2i_build_output_log ${app} ${image})
  # start container
  local container=$(docker_run_d ${image})
  local url=$(container_url ${container})
  # request
  local response=$(curl_retry ${url}/)
  # cleanup
  docker_rm ${container}
  docker_rmi ${image}

  # DOTNET_STARTUP_PROJECT=src/app/app.csproj
  # DOTNET_RESTORE_CONFIGFILE=src/app/NuGet.Config.s2i
  # The config file was used to restore S2iDotNetCoreDummy and didn't cause issues for the test and tool install.
  assert_equal "${response}" "Hello world"
  # DOTNET_TEST_PROJECTS=test/test1/test1.csproj test/test2
  assert_contains "${s2i_build}" "Test run for /opt/app-root/src/test/test1"
  assert_contains "${s2i_build}" "Test run for /opt/app-root/src/test/test2"

  # DOTNET_VERBOSITY=normal
  ## Environment
  assert_contains "${s2i_build}" "Environment:"
  assert_contains "${s2i_build}" "DOTNET_VERBOSITY=normal"
  assert_contains "${s2i_build}" ".NET information:"
  assert_contains "${s2i_build}" "Heap Size:"
  ## Test project restore
  assert_contains "${s2i_build}" 'Project "/opt/app-root/src/test/test1/test1.csproj" on node 1 \(Restore target\(s\)\).'
  ## Test project test
  assert_contains "${s2i_build}" 'Project "/opt/app-root/src/test/test1/test1.csproj" on node 1 \(VSTest target\(s\)\).'
  ## App project restore
  assert_contains "${s2i_build}" 'Project "/opt/app-root/src/src/app/app.csproj" on node 1 \(Restore target\(s\)\).'
  ## App project publish
  assert_contains "${s2i_build}" 'Project "/opt/app-root/src/src/app/app.csproj" on node 1 \(Publish target\(s\)\).'
  # DOTNET_PUBLISH_READYTORUN=true
  if [ "$(uname -m)" == "s390x" -o "$(uname -m)" == "ppc64le" ]; then
    assert_contains "${s2i_build}" 'DOTNET_PUBLISH_READYTORUN is not supported on'
  else
    assert_contains "${s2i_build}" '_CreateR2RImages'
  fi
}

test_config_3() {
  # groups envvar tests which are performed against dotnet-configuration-debug

  local app=dotnet-configuration-debug
  # build image
  local image=$(s2i_image_tag ${app})
  local s2i_build=$(s2i_build_output_log ${app} ${image})
  # cleanup
  docker_rmi ${image}

  # DOTNET_RESTORE_DISABLE_PARALLEL=true
  assert_contains "${s2i_build}" "Running non-parallel restore"
}

test_config() {
  test_start

  test_config_configuration
  test_config_1
  test_config_2
  test_config_3
}

test_split_build() {
  test_start

  # test openshift chained build
  # see 'chaining builds' in the openshift docs

  # this app has DOTNET_PACK=true
  local app=asp-net-hello-world-envvar

  local build_dir="${test_dir}/split_build"
  rm -rf "$build_dir"
  mkdir "$build_dir"
  pushd "$build_dir" > /dev/null

  # extract app.tar.gz from build
  local image=$(s2i_build ${app})
  local container=$(docker create ${image})
  docker cp ${container}:/opt/app-root/app.tar.gz app.tar.gz
  # cleanup
  docker_rm ${container}
  docker_rmi ${image}

  # create image based on app.tar.gz
  # we don't need to provide a CMD statement
  # app.tar.gz has a default-cmd.sh which matches with the runtime CMD.
  cat >Dockerfile <<EOF
FROM ${RUNTIME_IMAGE_NAME}
ADD app.tar.gz .
EOF
  image=$(docker_build .)

  # user to run the app (31002) is different than user that built the app (1001).
  local run_user=31002
  # start container
  local container=$(docker_run_as_d ${image} ${run_user})
  local url=$(container_url ${container})
  # request
  local response=$(curl_retry ${url}/)
  # cleanup
  docker_rm ${container}
  docker_rmi ${image}

  # app works
  assert_equal "${response}" "Hello world"

  popd > /dev/null
}

test_imagestream_sample() {
  test_start

  # test the sample app defined with the imagestreams:
  # "sampleRepo": "https://github.com/redhat-developer/s2i-dotnetcore-ex.git",
  # "sampleContextDir": "app",
  # "sampleRef": "dotnet-7.0"

  # build image
  local image=$(s2i_image_tag sample)
  docker_rmi ${tag}
  local s2i_build=$(s2i_build_core ${image} --pull-policy=always --context-dir=app --ref=dotnet-7.0 https://github.com/redhat-developer/s2i-dotnetcore-ex.git 2>&1)
  # start container
  local container=$(docker_run_d ${image})
  local url=$(container_url ${container})
  # request
  local response=$(curl_retry ${url}/)
  # cleanup
  docker_rm ${container}
  docker_rmi ${image}

  # app is working
  assert_contains "${response}" "html"
}

docker_run_certificatecount()
{
  local app=certificatecount

  # build image
  local image=$(s2i_build ${app} "$@")
  local output=$(docker_run ${image})
  # cleanup
  docker_rmi ${image}

  echo $output | awk '{print $NF}'
}

test_certificates() {
  test_start

  local default_count=$(docker_run_certificatecount)
  # It is unlikely to have less than 100 certificates.
  if [ "$default_count" -lt 100 ]; then
    error "Default number of certificates is too low: '${default_count}'"
    exit 1
  fi

  # DOTNET_SSL_DIRS=/doesntexist
  # We add a non existing directory, which must be ingored.
  local default_count_with_nonexist=$(docker_run_certificatecount -e DOTNET_SSL_DIRS=/doesntexist)
  assert_equal "$default_count" "$default_count_with_nonexist"

  # DOTNET_SSL_DIRS=/doesntexist certdir1 certdir2 certdir3/cert.pem
  # - /doesntexist      : ignored
  # - certdir1          : contains 1 certificate in 1 file
  # - certdir2          : contains 2 certificates in 1 file
  # - certdir3/cert.pem : file containing 1 certificate
  # DOTNET_RM_SRC=true to check these certificates are copied outside the src folder.
  local count_with_additional=$(docker_run_certificatecount -e DOTNET_SSL_DIRS='/doesntexist certdir1 certdir2 certdir3/cert.pem')
  assert_equal "$count_with_additional" "$(($default_count + 4))"
}

test_binary()
{
  test_start

  # precompiled contains 2 pre-compiled .net console applications
  # console.dll: prints out "Hello World!"
  # world2/console.dll: prints out "Hello World2!"
  local app=precompiled

  # verify the console.dll entry point assembly is detected and ran
  local image=$(s2i_build ${app})
  local output=$(docker_run ${image})
  docker_rmi ${image}
  assert_contains "${output}" "Hello World!"

  # verify we can run world2/console.dll by setting DOTNET_STARTUP_ASSEMBLY
  image=$(s2i_build ${app} -e DOTNET_STARTUP_ASSEMBLY=world2/console.dll)
  output=$(docker_run ${image})
  docker_rmi ${image}
  assert_contains "${output}" "Hello World2!"
}

test_incremental()
{
  test_start

  # asp-net-hello-world-envvar2 is an ASP.NET Core application
  local app=asp-net-hello-world-envvar2

  # perform a first build, with the incremental flag
  local image=$(s2i_image_tag ${app})
  docker_rmi ${image}
  local s2i_build=$(s2i_build_output_log ${app} ${image} -e DOTNET_INCREMENTAL=true)

  # verify packages are installed
  assert_contains "${s2i_build}" "GET https://api.nuget.org/v3-flatcontainer/newtonsoft.json/13.0.1/newtonsoft.json.13.0.1.nupkg"
  # verify the build completes succesfully
  assert_completed_build ${image} "${s2i_build}"

  # perform a second build, with the incremental flag
  s2i_build=$(s2i_build_output_log ${app} ${image} --incremental -e DOTNET_INCREMENTAL=true)
  # verify NO other packages are installed
  assert_not_contains "${s2i_build}" "GET https://api.nuget.org/v3-flatcontainer/newtonsoft.json/13.0.1/newtonsoft.json.13.0.1.nupkg"
  # verify the build completes succesfully
  assert_completed_build ${image} "${s2i_build}"

  # cleanup
  docker_rmi ${image}
}

test_incremental_without_packages()
{
  test_start

  # asp-net-hello-world-envvar2 is an ASP.NET Core application
  local app=asp-net-hello-world-envvar2

  # perform a first build without keeping packages
  local image=$(s2i_image_tag ${app})
  local s2i_build=$(s2i_build_output_log ${app} ${image} -e DOTNET_INCREMENTAL=false)
  # verify packages are installed
  assert_contains "${s2i_build}" "GET https://api.nuget.org/v3-flatcontainer/newtonsoft.json/13.0.1/newtonsoft.json.13.0.1.nupkg"
  # verify the build completes succesfully
  assert_completed_build ${image} "${s2i_build}"

  # perform a second build, with the incremental flag
  s2i_build=$(s2i_build_output_log ${app} ${image} --incremental)
  # verify NO incremental packages are installed
  assert_not_contains "${s2i_build}" "Installing artifacts from incremental build"
  # verify the build completes succesfully
  assert_completed_build ${image} "${s2i_build}"

  # cleanup
  docker_rmi ${image}
}

test_repos() {
  test_start

  local output=$(docker_run_as $IMAGE_NAME 0 microdnf install -y zlib-devel)
  assert_contains "$output" "Complete"
}

test_rpm_packages() {
  test_start

  local current_list="${test_dir}/packages.actual.list"
  rm -f "${current_list}"
  # the ${IMAGE_OS,,} syntax converts IMAGE_OS to lowercase
  local package_list_file="packages.${IMAGE_OS,,}.list"

  # get the list of installed packages
  docker_run "${IMAGE_NAME}" '/bin/bash' '-c' 'rpm -qa --queryformat "%{NAME}\n" | sort -u' > "${current_list}"

  # verify the list of packages hasn't changed
  diff -u <(cat "${current_list}") <(cat "${test_dir}/${package_list_file}")
  assert_equal "$?" 0
}

test_npm_mirror() {
  test_start

  local app=asp-net-hello-world
  local image=$(s2i_image_tag ${app})
  local enabled_string="---> Setting npm mirror"

  # Check that it isn't setting an npm mirror when it is not specified
  local s2i_build=$(s2i_build_output_log ${app} ${image})
  assert_not_contains "${s2i_build}" "${enabled_string}"

  # And check that it is setting an npm mirror when it is specified
  local s2i_build=$(s2i_build_output_log ${app} ${image} -e NPM_MIRROR='https://TEST.MIRROR')
  assert_contains "${s2i_build}" "${enabled_string}"
}

test_rm_tmp_dotnet() {
  test_start

  # rm-tmp-dotnet creates a directory at /tmp/.dotnet/shm during assemble.
  local app=rm-tmp-dotnet

  # build image
  local image=$(s2i_image_tag ${app})
  local s2i_build=$(s2i_build_output_log ${app} ${image})
  local tmp_dotnet=$(docker run --rm ${image} stat /tmp/.dotnet 2>&1)

  # cleanup
  docker_rmi ${image}

  # verify /tmp/.dotnet was removed
  assert_contains "${tmp_dotnet}" "No such file or directory"
}

info "Testing ${IMAGE_NAME}"

if [ ${OPENSHIFT_ONLY} != true ]; then
  test_image
  test_config
  test_usage
  test_default_cmd
  if [ "$IMAGE_OS" = "RHEL8" ]; then
    test_repos
    test_rpm_packages
  fi
  test_rm_tmp_dotnet
  test_npm_mirror
  test_consoleapp
  test_multiframework
  test_fsharp
  test_vb
  test_published_files
  test_aspnetapp
  test_split_build
  test_templates
  test_user
  test_certificates
  test_binary
  test_incremental
  test_incremental_without_packages
else
  test_imagestream_sample
fi

if [ "$STOP_ON_ERROR" != "true" ]; then
  failures=(${TEST_FAILURES})
  if [ ${#failures[@]} -gt 0 ]; then
    echo "[ERROR] Tests failed: ${#failures[@]}"
    for item in ${failures[@]}; do
      echo "  ${item}"
    done
    exit 1
  fi
fi

info "All tests finished successfully."
