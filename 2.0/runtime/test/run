#!/bin/bash
#
# The 'run' script performs simple tests that verifies usability
# of the image
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
#
# DEBUG environment variable, if not empty, makes 'run' to log every step
# of testing.
#
# Example usage: $ sudo ./test/run

IMAGE_NAME=${IMAGE_NAME:-dotnet/dotnet-20-runtime-rhel7}

if [ "$DEBUG" != "" ]; then
  set -x
fi

info() {
  echo -e "\n\e[1m[INFO] $@\e[0m\n"
}

test_cmd() {
  local run_cmd="$1"
  local expected="$2"
  local user="$3"

  info "Running command '${run_cmd}'"
  local docker_arg=""
  if [ -n "${user}" ]; then
    docker_arg="${docker_arg} --user=${user}"
  fi
  if [ -n "${run_cmd}" ]; then
    out=$(docker run --rm ${docker_arg} ${IMAGE_NAME} "${run_cmd}" 2>&1)
  else
    out=$(docker run --rm ${docker_arg} ${IMAGE_NAME} 2>&1)
  fi
  if ! echo "${out}" | grep -q "${expected}"; then
    echo "ERROR[/bin/bash -c "${run_cmd}"] Expected '${expected}', got '${out}'"
    exit 1
  fi
}

info "Testing ${IMAGE_NAME}"

# Since we built the candidate image locally, we don't want S2I attempt to pull
# it from Docker hub
s2i_args="--force-pull=false"

# ENTRYPOINT enables scl so dotnet is available
test_cmd "dotnet --info" "Microsoft .NET Core Shared Framework Host"
test_cmd "dotnet" "Usage: dotnet"

# default CMD
test_cmd "" "This is a runtime image for .NET Core"

# we run as user 'default'
test_cmd "whoami" "default"
# other users are mapped to 'default'
test_cmd "whoami" "default" 100001
# root is 'root'
test_cmd "whoami" "root" 0

info "All tests finished successfully."
