#!/bin/bash
#
# The 'run' script performs simple tests that verifies usability
# of the image
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
#
# OPENSHIFT_ONLY environment variable, if 'true', only tests features used by
# OpenShift's try-it feature.
#
# DEBUG environment variable, if not empty, makes 'run' to log every step
# of testing.
#
# Example usage: $ sudo ./test/run

IMAGE_NAME=${IMAGE_NAME:-dotnet/dotnet-20-runtime-rhel7}

OPENSHIFT_ONLY=${OPENSHIFT_ONLY:-false}

if [ "$DEBUG" != "" ]; then
  set -x
fi

declare -a CLI_APPS=(
  hw_framework_config
  helloworld
  qotd
  dotnet-configuration-debug
  dotnet-configuration-release
)
declare -a WEB_APPS=(
  asp-net-hello-world
  asp-net-hello-world-envvar
  asp-net-hello-world-envvar2
)

test_dir="$(readlink -zf $(dirname "${BASH_SOURCE[0]}"))"
image_dir=$(readlink -zf ${test_dir}/..)
dotnet_version="2.0.0-preview2-006497"
sample_app_url="https://github.com/redhat-developer/s2i-dotnetcore-ex.git"

test_port=8080

info() {
  echo -e "\n\e[1m[INFO] $@\e[0m\n"
}

image_exists() {
  docker inspect $1 &>/dev/null
}

container_exists() {
  local cid_file="$1"
  image_exists $(cat $cid_file)
}

container_ip() {
  docker inspect --format="{{ .NetworkSettings.IPAddress }}" $(cat $cid_file)
}

run_s2i_build_from_url() {
  local url="$1"
  s2i build ${s2i_args} "${url}" ${IMAGE_NAME} ${IMAGE_NAME}-testapp
}

prepare() {
  if ! image_exists ${IMAGE_NAME}; then
    echo "ERROR: The image ${IMAGE_NAME} must exist before this script is executed."
    exit 1
  fi
  # TODO: S2I build require the application is a valid 'GIT' repository, we
  # should remove this restriction in the future when a file:// is used.
  info "Preparing to test ${1} ..."
  pushd ${test_dir}/${1} >/dev/null
  git init
  git config user.email "build@localhost" && git config user.name "builder"
  git add -A && git commit -m "Sample commit"
  popd >/dev/null
}

run_test_application() {
  local image="$1"
  local cid_file="$2"
  docker run --user=100001 ${CONTAINER_ARGS} -d --cidfile=${cid_file} -p ${test_port}:${test_port} ${image}
}

run_cli_test_application() {
  local image=$1
  docker run --user=100001 ${CONTAINER_ARGS} -i --rm ${image}
}

cleanup_container() {
  local cid_file="$1"
  info "Cleaning up app container ..."
  if [ -f $cid_file ]; then
    if container_exists "${cid_file}"; then
      docker stop $(cat $cid_file)
      docker rm  $(cat $cid_file)
    fi
  fi
}

cleanup() {
  info "Cleaning up the test application image"
  if image_exists ${IMAGE_NAME}-testapp; then
    docker rmi -f ${IMAGE_NAME}-testapp
  fi
  rm -rf ${test_dir}/${1}/.git
}

check_result() {
  local result="$1"
  if [[ "$result" != "0" ]]; then
    info "TEST FAILED (${result})"
    cleanup
    exit $result
  fi
}

wait_for_cid() {
  local max_attempts=10
  local sleep_time=1
  local attempt=1
  local result=1
  info "Waiting for application container to start $CONTAINER_ARGS ..."
  while [ $attempt -le $max_attempts ]; do
    [ -f $cid_file ] && [ -s $cid_file ] && break
    attempt=$(( $attempt + 1 ))
    sleep $sleep_time
  done
}

test_pid_1() {
  local cid_file="$1"
  info "Testing whether dotnet runs as PID 1"
  # Use the 'args' format so as to get command arguments. We are looking for 'dotnet' with
  # an assembly dll.
  out="$(docker exec $(cat ${cid_file}) /bin/bash -c 'ps --no-headers -o args 1' 2>&1)"
  if ! echo "${out}" | grep "dotnet" | grep -q '\.dll' ; then
    echo "'dotnet <assembly>' not process with PID 1. PID 1 process was: '${out}'"
    cleanup_container "${cid_file}"
    return 1
  fi
}

# Usage:
#   test_http <path> <expected> [<filter_cmd>]
#
# Issues a HTTP GET request with path <path> and matches it against
# <expected>. The match is an *exact*, character by character, match
# unless <filter_cmd> is also specified. In that case, the output of
# the HTTP GET request at <path> is filtered through <filter_cmd>.
test_http() {
  local path=$1
  local expected=$2
  local filter_cmd="$3"
  local output_file=$(mktemp --suffix=.dotnet_out)
  local max_attempts=30
  local sleep_time=1
  local attempt=1
  local result=1
  local url=http://$(container_ip):${test_port}${path}
  info "Testing HTTP ($url) ${CONTAINER_ARGS} output file ${output_file}..."
  while [ $attempt -le $max_attempts ]; do
    response_code=$(curl -s -w %{http_code} -o ${output_file} ${url})
    status=$?
    if [ $status -eq 0 ]; then
      if [ $response_code -eq 200 ]; then
        if [ $# -eq 2 ]; then
          output=$(cat ${output_file})
          if [ "${output}_" == "${expected}_" ]; then
            result=0
          fi
        elif [ $# -eq 3 ]; then
          output=$(cat ${output_file} | eval ${filter_cmd})
          if [ "${output}_" == "${expected}_" ]; then
            result=0
          fi
        else
          result=0
        fi
      fi
      break
    fi
    attempt=$(( $attempt + 1 ))
    sleep $sleep_time
  done
  rm -rf ${output_file}
  return $result
}

test_web_app_http() {
  test_http "/" "Hello world"
  check_result $?
  test_http "/TextFile.txt" "A text file."
  check_result $?
}

init_web_app() {
  local image="$1"
  local cid_file="$2"

  # Verify that the HTTP connection can be established to test application container
  run_test_application "${image}" "${cid_file}" &

  # Wait for the container to write it's CID file
  wait_for_cid

  test_pid_1 "${cid_file}"
  check_result $?
}

test_web_application() {
  local app="$1"
  info "Starting web application tests for '${app}'"
  create_runtime_app ${app}

  image="${IMAGE_NAME}-testapp"

  ##
  # test the runtime container
  ##
  info "Starting runtime image tests"
  local cid_file=$(mktemp -u --suffix=.cid)
  init_web_app "${image}" "${cid_file}"
  # test application with default user
  test_web_app_http

  # test application with random user
  CONTAINER_ARGS="-u 12345" test_web_app_http
  cleanup_container "${cid_file}"

  info "All web application tests for '${app}' finished successfully."
  cleanup ${app}
}

test_openshift_sample_app() {
  local image="$1"
  local cid_file=$(mktemp -u --suffix=.cid)
  # Verify that the HTTP connection can be established to test application container
  run_test_application "${image}" "${cid_file}" &

  # Wait for the container to write it's CID file
  wait_for_cid

  test_http "/" "Sample pages using ASP.NET Core MVC" "grep \"ASP.NET Core MVC\" | sed -e 's#<li>##g' -e 's#</li>##g' -e 's#^ \\+##g'"
  check_result $?

  cleanup_container "${cid_file}"
}

echo_details() {
  local expected="$1"
  local actual="$2"
  cat <<EOF
expected:

-------->8
${expected}
8<--------

but got:

-------->8
${actual}
8<--------

EOF
}

get_expected_cli() {
  local app="$1"
  case "${app}" in
    "helloworld")
      echo 'Hello World!'
      ;;
    "hw_framework_config")
      echo 'Hello World!'
      ;;
    "qotd")
      echo IGNORE_ME
      ;;
    "dotnet-configuration-debug")
      echo 'Debug'
      ;;
    "dotnet-configuration-release")
      echo 'Release'
      ;;
    *)
      echo "Unknown CLI app ${app}"
      exit 1
      ;;
  esac
}

filter_cli() {
  local app="$1"
  local all_output="$2"
  case "${app}" in
    "helloworld")
      # Note: tail -n1 => Omit "--> Running application ..." output
      echo "${all_output}" | tail -n1
      ;;
    "hw_framework_config")
      # Note: tail -n1 => Omit "--> Running application ..." output
      echo "${all_output}" | tail -n1
      ;;
    "qotd")
      # Note: tail -n1 => Omit "--> Running application with ..." output
      echo "${all_output}" | tail -n1
      ;;
    "dotnet-configuration-debug")
      # Note: tail -n1 => Omit "--> Running application with ..." output
      echo "${all_output}" | tail -n1
      ;;
    "dotnet-configuration-release")
      # Note: tail -n1 => Omit "--> Running application with ..." output
      echo "${all_output}" | tail -n1
      ;;
    *)
      echo "Unknown CLI app ${app}"
      exit 1
      ;;
  esac
}

success_cli() {
  local app="$1"
  local actual="$2"
  local expected="$3"
  case "${app}" in
    "helloworld")
      echo "${actual}" | grep -q "${expected}"
      return $?
      ;;
    "hw_framework_config")
      echo "${actual}" | grep -q "${expected}"
      return $?
      ;;
    "qotd")
      local retval=0
      # Only match for the QOTD prefix
      echo ${actual} | grep -q "\[QOTD\]: "
      retval=$(( ${retval} + $? ))
      return ${retval}
      ;;
    "dotnet-configuration-debug")
      echo "${actual}" | grep -q "${expected}"
      return $?
      ;;
    "dotnet-configuration-release")
      echo "${actual}" | grep -q "${expected}"
      return $?
      ;;
    *)
      echo "Unknown CLI app ${app}"
      exit 1
      ;;
  esac
}

test_cli_app() {
  local app="$1"
  #info "Building the base image: ${app} ..."

  info "Testing CLI app against runtime image: ${app} ..."
  create_runtime_app ${app}
  #check_result $?
  local expected="$( get_expected_cli ${app} )"
  local actual_pre="$( run_cli_test_application ${IMAGE_NAME}-testapp)"
  local actual="$( filter_cli "${app}" "${actual_pre}" )"
  if ! success_cli "${app}" "${actual}" "${expected}"; then
    info "Test CLI app: ${app} FAILED."
    echo_details "${expected}" "${actual}"
    cleanup ${app}
    exit 1
  fi
  info "Test CLI app (runtime image): ${app} PASSED."
  cleanup ${app}
}

create_runtime_app() {
  local app="$1"
  # Create a temp directory to hold our temporary files
  TMPDIR=$(mktemp -d)
  # TODO: Figure out a better way to allow access from the image /OTHER/ than 777
  chmod 777 ${TMPDIR}
  echo "Created temp directory ${TMPDIR}"
  cp "${app}.tar.gz" "${TMPDIR}/${app}.tar.gz"
  if [ ! -e "${TMPDIR}/${app}.tar.gz" ] || [ ! -s "${TMPDIR}/${app}.tar.gz" ]; then
    echo "Failed to find the binary tar for app '${app}'."
    echo "Removing temp directory ${TMPDIR}"
    rm -rf ${TMPDIR}
    cleanup
    exit 1
  fi

cat << EOF >"${TMPDIR}/Dockerfile"
FROM ${IMAGE_NAME}
RUN mkdir -p '/opt/app-root/publish'
WORKDIR /opt/app-root/publish
COPY ${app}.tar.gz ${app}.tar.gz
RUN tar xvf ${app}.tar.gz
CMD /opt/app-root/publish/s2i_run
EOF

  # Build the runtime image
  docker build -f "${TMPDIR}/Dockerfile" -t "${IMAGE_NAME}-testapp" ${TMPDIR}
  if [ -n ${TMPDIR} ] && [ -e ${TMPDIR} ]; then
    echo "Removing temp directory ${TMPDIR}"
    rm -rf ${TMPDIR}
  fi
}

info "Testing ${IMAGE_NAME}"

# Since we built the candidate image locally, we don't want S2I attempt to pull
# it from Docker hub
s2i_args="--force-pull=false"

# Verify OpenShift's s2i-dotnetcore-ex runs
# TODO: Adjust this test once the openshift template is updated
if [ ${OPENSHIFT_ONLY} = true ]; then
  old_s2i_args="${s2i_args}"
  s2i_args="${s2i_args} --context-dir=app --ref=dotnetcore-2.0"
  run_s2i_build_from_url ${sample_app_url}
  check_result $?

  # test application with default user
  test_openshift_sample_app "${IMAGE_NAME}-testapp"

  # test application with random user
  CONTAINER_ARGS="-u 12345" test_openshift_sample_app "${IMAGE_NAME}-testapp"

  info "All tests for the ${sample_app_url} finished successfully."
  cleanup "ignore-me"
  s2i_args="${old_s2i_args}"
else
  # Verify that some CLI s2i apps build and run properly
  for app in ${CLI_APPS[@]}; do
    test_cli_app "${app}"
  done

  for app in ${WEB_APPS[@]}; do
    test_web_application "${app}"
  done
fi

info "All tests finished successfully."
