#!/bin/bash
#
# The 'run' script performs simple tests that verifies usability
# of the image
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
#
# OPENSHIFT_ONLY environment variable, if 'true', only tests features used by
# OpenShift's try-it feature.
#
# TEST_PORT specifies the port on the docker host to be used for testing.
# The container application will still use 8080, but this port will be bound
# to the running container when testing asp.net projects.
#
# DEBUG environment variable, if not empty, makes 'run' to log every step
# of testing.
#
# Example usage: $ sudo ./test/run

if [ "$IMAGE_OS" = "CENTOS" ]; then
  IMAGE_NAME=${IMAGE_NAME:-dotnet/dotnet-22-centos7}
  RUNTIME_IMAGE_NAME=${RUNTIME_IMAGE_NAME:-dotnet/dotnet-22-runtime-centos7}
else
  IMAGE_NAME=${IMAGE_NAME:-dotnet/dotnet-22-rhel7}
  RUNTIME_IMAGE_NAME=${RUNTIME_IMAGE_NAME:-dotnet/dotnet-22-runtime-rhel7}
fi
OPENSHIFT_ONLY=${OPENSHIFT_ONLY:-false}

test_dir="$(readlink -zf $(dirname "${BASH_SOURCE[0]}"))"
source ${test_dir}/testcommon

# Versions of Microsoft.AspNetCore.{All,App} packages that are known by latest RHEL sdk.
# TODO: update latest patch versions below
aspnet_latest_app_version=2.2.0
aspnet_latest_all_version=2.2.0
if [ "$IMAGE_OS" = "CENTOS" ]; then
# sdk versions supported on CentOS
error "No versions supported"
exit 1
else
# sdk versions supported on RHEL
sdk_versions=( "2.2.100" )
fi

sdk_default_version=${sdk_versions[0]}
sdk_latest_version=${sdk_versions[-1]}
sample_app_url="https://github.com/redhat-developer/s2i-dotnetcore-ex.git"

s2i_build_and_run() {
  local app="$1"

  local image=$(s2i_build ${app})
  local output=$(docker_run ${image})
  docker_rmi ${image}

  echo "$output"
}

test_s2i_usage_projfile()
{
  # startup_project_not_found contains two project files
  # but doesn't set DOTNET_STARTUP_PROJECT to select one.
  local app=startup_project_not_found

  # build image
  local image=$(s2i_image_tag ${app})
  local s2i_build=$(s2i_build_output_log ${app} ${image})
  # cleanup
  docker_rmi ${image}

  # verify usage instructions
  local expected="error: DOTNET_STARTUP_PROJECT has no project file
You can specify the startup project by adding an '.s2i/environment' file to the source repository.
The source repository contains the following projects:
- proj1/proj1.csproj
- proj2/proj2.fsproj
Update the '.s2i/environment' file to specify the project you want to publish, for example DOTNET_STARTUP_PROJECT=proj1/proj1.csproj"
  assert_contains "${s2i_build}" "${expected}"
}

test_s2i_sdk_version()
{
  test_start
  local expected_version=$1

  # The assemble script prints out the SDK version.
  local app=sdkversion

  # build image
  local image=$(s2i_image_tag ${app})
  local s2i_build=$(s2i_build_output_log ${app} ${image})

  # cleanup
  docker_rmi ${image}

  # verify sdk version
  assert_contains "${s2i_build}" "SDK Version: ${expected_version}"
}

test_s2i_usage() {
  local output=$(s2i usage ${IMAGE_NAME} 2>&1)

  # s2i usage refers to the sample app
  assert_contains "$output" "${sample_app_url}"
}

test_docker_run_usage() {
  local output=$(docker_run ${IMAGE_NAME})

  # docker run refers to the sample app
  assert_contains "$output" "${sample_app_url}"
}

test_usage() {
  test_start

  test_s2i_usage
  test_s2i_usage_projfile
  test_docker_run_usage
}

test_image() {
  test_start

  # verify dotnet is available
  local image_dotnet_version=$(docker_run ${IMAGE_NAME} 'dotnet --version')
  assert_equal "${image_dotnet_version}" "${sdk_latest_version}"

  # Verify $HOME != $CWD. See https://github.com/redhat-developer/s2i-dotnetcore/issues/28
  local working_dir=$(docker_run ${IMAGE_NAME} pwd)
  assert_equal "${working_dir}" "/opt/app-root/src"
  local env=$(docker_run ${IMAGE_NAME} env)
  assert_contains "${env}" "HOME=/opt/app-root"$'\n'

  # Verify the `dotnet watch` command can detect file changes in the container.
  assert_contains "${env}" "DOTNET_USE_POLLING_FILE_WATCHER=true"$'\n'

  # verify npm is available
  local image_npm_version=$(docker_run ${IMAGE_NAME} 'npm --version')
  assert_equal "${image_npm_version}" "5.6.0"
}

test_consoleapp() {
  test_start

  # helloworld is a C# console application

  # application returns expected output
  assert_contains "$(s2i_build_and_run helloworld)" "Hello World!"
}

test_multiframework() {
  test_start

  # hw_framework_config targets both: net451 and netcoreapp
  # this test verifies we are building and able to run the .NET Core target.

  # application returns expected output
  assert_contains "$(s2i_build_and_run hw_framework_config)" "Hello World!"
}

test_fsharp() {
  test_start

  # helloworld-fs is an F# console application

  # application returns expected output
  assert_contains "$(s2i_build_and_run helloworld-fs)" "Hello World from F#!"
}

test_vb() {
  test_start

  # helloworld-vb is a VB console application

  # application returns expected output
  assert_contains "$(s2i_build_and_run helloworld-vb)" "Hello World from VB!"
}

test_published_files() {
  test_start

  # qotd has an appsettings.json and quotes.txt files that must
  # be published with the app and found at runtime.

  # application returns expected output
  assert_contains "$(s2i_build_and_run qotd)" "QOTD"
}

test_aspnetapp() {
  test_start

  # asp-net-hello-world is an ASP.NET Core application

  local app=asp-net-hello-world
  # build image
  local image=$(s2i_build ${app})
  # start container
  local container=$(docker_run_d ${image})
  local url=$(container_url ${container})
  # request
  local response_base=$(curl_retry ${url}/)
  local response_file=$(curl_retry ${url}/TextFile.txt)
  local pid1_process=$(docker_exec ${container} /bin/bash -c 'ps --no-headers -o args 1')
  # cleanup
  docker_rm ${container}
  docker_rmi ${image}

  # Check response by ASP.NET pipeline
  assert_equal "${response_base}" "Hello world"
  # Check response by file middleware
  assert_equal "${response_file}" "A text file."
  # Verify dotnet runs as PID 1
  assert_equal "${pid1_process}" "dotnet asp-net-hello-world.dll"
}

test_user() {
  test_start

  local app=asp-net-hello-world
  # user to run the app (100002) is different than user that built the app (1001).
  local run_user=100002

  # build image
  local image=$(s2i_build ${app})
  # get username
  local username=$(docker_run_as ${image} ${run_user} whoami)
  # start container
  local container=$(docker_run_as_d ${image} ${run_user})
  local url=$(container_url ${container})
  # request
  local response=$(curl_retry ${url}/)
  # cleanup
  docker_rm ${container}
  docker_rmi ${image}

  # user is default
  assert_equal "${username}" "default"
  # app is working
  assert_equal "${response}" "Hello world"
}

test_template()
{
  local template=$1
  info " template: $template"

  # newweb creates instantiates the 'dotnet new mvc' template
  # in the assemble script.
  local app=newtemplate
  # build image
  local image=$(s2i_build ${app} -e TEMPLATE=$template)
  # start container
  local container=$(docker_run_d ${image})
  local url=$(container_url ${container})
  # request
  local response=$(curl_retry ${url}/)
  # cleanup
  docker_rm ${container}
  docker_rmi ${image}

  # app is working
  assert_contains "${response}" "html"
}

test_templates() {
  test_start

  # mvc is a pure ASP.NET Core MVC web application
  # angular and reactredux include a front-end which is built using npm packages.
  local templates=(mvc angular reactredux)
  for template in ${templates[@]}; do
    test_template $template
  done
}

test_config_configuration() {
  # DOTNET_CONFIGURATION=Debug
  assert_contains "$(s2i_build_and_run dotnet-configuration-debug)" "Debug"
  # DOTNET_CONFIGURATION=Release
  assert_contains "$(s2i_build_and_run dotnet-configuration-release)" "Release"
}

test_config_1() {
  # groups envvar tests which are performed against asp-net-hello-world-envvar

  local app=asp-net-hello-world-envvar
  # build image
  local image=$(s2i_image_tag ${app})
  local s2i_build=$(s2i_build_output_log ${app} ${image})
  # find bower and packed all
  local bower_path=$(docker_run ${image} bash -c "command -v bower")
  local watch_path=$(docker_run ${image} bash -c "command -v dotnet-watch")
  local serve_path=$(docker_run ${image} bash -c "command -v dotnet-serve")
  local packed_app=$(docker_run ${image} ls /opt/app-root/app.tar.gz)
  local src_folder_content=$(docker_run ${image} ls -a /opt/app-root/src)
  # start container
  local container=$(docker_run_d ${image})
  local url=$(container_url ${container})
  # request
  local response=$(curl_retry ${url}/)
  # cleanup
  docker_rm ${container}
  docker_rmi ${image}

  # DOTNET_STARTUP_PROJECT=src/app
  assert_equal "${response}" "Hello world"
  # DOTNET_TEST_PROJECTS=test/test1 test/test2
  assert_contains "${s2i_build}" "Test run for /opt/app-root/src/test/test1"
  assert_contains "${s2i_build}" "Test run for /opt/app-root/src/test/test2"
  # DOTNET_ASSEMBLY_NAME=SampleApp
  assert_contains "${s2i_build}" "/opt/app-root/src/src/app/bin/Debug/netcoreapp2.2/SampleApp.dll"
  # DOTNET_RESTORE_SOURCES=https://api.nuget.org/v3/index.json https://www.myget.org/F/s2i-dotnetcore
  assert_contains "${s2i_build}" "Installing S2iDotNetCoreDummy"
  # DOTNET_PACK=true
  assert_contains "${s2i_build}" "Packing application..."
  assert_equal "${packed_app}" "/opt/app-root/app.tar.gz"
  # DOTNET_NPM_TOOLS=bower gulp
  assert_contains "${s2i_build}" "bower@"
  assert_contains "${s2i_build}" "gulp@"
  assert_equal "${bower_path}" "/opt/app-root/node_modules/.bin/bower"
  # DOTNET_TOOLS=dotnet-watch@2.2.0-preview2-35157 dotnet-serve
  assert_equal "${watch_path}" "/opt/app-root/.dotnet/tools/dotnet-watch"
  assert_equal "${serve_path}" "/opt/app-root/.dotnet/tools/dotnet-serve"
  assert_contains "${s2i_build}" "Tool 'dotnet-watch' (version '2.2.0-preview2-35157') was successfully installed."
  # DOTNET_RM_SRC=true
  # The application folder contains a file and folder that starts with a '.', we verify that *all* files are removed.
  assert_contains "${s2i_build}" "Removing sources..."
  assert_contains "${src_folder_content}" "."$'\n'".."
}

test_config_2() {
  # groups envvar tests which are performed against asp-net-hello-world-envvar2

  local app=asp-net-hello-world-envvar2
  # build image
  local image=$(s2i_image_tag ${app})
  local s2i_build=$(s2i_build_output_log ${app} ${image})
  # start container
  local container=$(docker_run_d ${image})
  local url=$(container_url ${container})
  # request
  local response=$(curl_retry ${url}/)
  # cleanup
  docker_rm ${container}
  docker_rmi ${image}

  # DOTNET_STARTUP_PROJECT=src/app/app.csproj
  assert_equal "${response}" "Hello world"
  # DOTNET_TEST_PROJECTS=test/test1/test1.csproj test/test2
  assert_contains "${s2i_build}" "Test run for /opt/app-root/src/test/test1"
  assert_contains "${s2i_build}" "Test run for /opt/app-root/src/test/test2"

  # DOTNET_VERBOSITY=detailed
  ## Environment
  assert_contains "${s2i_build}" "Environment:"
  assert_contains "${s2i_build}" "DOTNET_VERBOSITY=detailed"
  # DOTNET_RESTORE_DISABLE_PARALLEL=true                                                                                                                                     
  assert_contains "${s2i_build}" "Running non-parallel restore"
  ## Test project restore
  assert_contains "${s2i_build}" 'Project "/opt/app-root/src/test/test1/test1.csproj" on node 1 (Restore target(s)).'
  ## Test project test
  assert_contains "${s2i_build}" 'Project "/opt/app-root/src/test/test1/test1.csproj" on node 1 (VSTest target(s)).'
  ## App project restore
  assert_contains "${s2i_build}" 'Project "/opt/app-root/src/src/app/app.csproj" on node 1 (Restore target(s)).'
  ## App project publish
  assert_contains "${s2i_build}" 'Project "/opt/app-root/src/src/app/app.csproj" on node 1 (Publish target(s)).'
}

test_config() {
  test_start

  test_config_configuration
  test_config_1
  test_config_2
}

test_split_build() {
  test_start

  # test openshift chained build
  # see 'chaining builds' in the openshift docs

  # this app has DOTNET_PACK=true
  local app=asp-net-hello-world-envvar

  local build_dir="${test_dir}/split_build"
  rm -rf "$build_dir"
  mkdir "$build_dir"
  pushd "$build_dir" > /dev/null

  # extract app.tar.gz from build
  local image=$(s2i_build ${app})
  local container=$(docker create ${image})
  docker cp ${container}:/opt/app-root/app.tar.gz .
  # cleanup
  docker_rm ${container}
  docker_rmi ${image}

  # create image based on app.tar.gz
  # we don't need to provide a CMD statement
  # app.tar.gz has a default-cmd.sh which matches with the runtime CMD.
  cat >Dockerfile <<EOF
FROM ${RUNTIME_IMAGE_NAME}
ADD app.tar.gz .
EOF
  image=$(docker_build .)

  # user to run the app (100002) is different than user that built the app (1001).
  local run_user=100002
  # start container
  local container=$(docker_run_as_d ${image} ${run_user})
  local url=$(container_url ${container})
  # request
  local response=$(curl_retry ${url}/)
  # cleanup
  docker_rm ${container}
  docker_rmi ${image}

  # app works
  assert_equal "${response}" "Hello world"

  popd > /dev/null
}

test_imagestream_sample() {
  test_start

  # test the sample app defined with the imagestreams:
  # "sampleRepo": "https://github.com/redhat-developer/s2i-dotnetcore-ex.git",
  # "sampleContextDir": "app",
  # "sampleRef": "dotnetcore-2.2"

  # build image
  local image=$(s2i_image_tag sample)
  docker_rmi ${tag}
  local s2i_build=$(s2i build --pull-policy=always --context-dir=app --ref=dotnetcore-2.2 https://github.com/redhat-developer/s2i-dotnetcore-ex.git ${IMAGE_NAME} ${image} 2>&1)
  # start container
  local container=$(docker_run_d ${image})
  local url=$(container_url ${container})
  # request
  local response=$(curl_retry ${url}/)
  # cleanup
  docker_rm ${container}
  docker_rmi ${image}

  # app is working
  assert_contains "${response}" "html"
}

test_devmode_user() {
  test_start

  # check DEV_MODE run has permissions to build the source added by assemble

  # This application is configured (.s2i/environment):
  #   DEV_MODE=true, DOTNET_STARTUP_PROJECT=src/app
  local app=devmode-src
  # user to run the app (100002) is different than user that built the app (1001).
  local run_user=100002

  # build image
  local image=$(s2i_build ${app})
  # start container
  local container=$(docker_run_as_d ${image} ${run_user})
  # request
  local url=$(container_url ${container})
  local response=$(curl_retry ${url}/ 60) # 60 attempts
  # cleanup
  docker_rm ${container}
  docker_rmi ${image}

  # Check app was launched succesfully after uploading sources.
  assert_equal "${response}" "Hello World!"
}

test_devmode_change() {
  test_start

  # test DEV_MODE run picks up changes

  # This application has no sources and is configured (.s2i/environment):
  #   DEV_MODE=true, DOTNET_STARTUP_PROJECT=src/app
  local app=devmode
  # build image
  local image=$(s2i_build ${app})
  # start container
  local container=$(docker_run_d ${image})
  # retrieve log
  local attempt=1
  local log=""
  while [ -z "${log}" -a $attempt -le 5 ]; do
    log=$(docker logs ${container})
    if [ -z "${log}" ]; then
      sleep 1
    fi
    attempt=$(( $attempt + 1 ))
  done
  # copy source (from devmode-src) in container
  local app_src_dir="${test_dir}/devmode-src/."

  # The 'a' in goa+rwx is there to work around a docker issue
  # Once the issue is resolved it should be removed.
  # See https://bugzilla.redhat.com/show_bug.cgi?id=1492814 for more info.
  chmod -R goa+rwx "${app_src_dir}"
  docker cp "${app_src_dir}" "${container}:/opt/app-root/src"
  # request
  local url=$(container_url ${container})
  local response=$(curl_retry ${url}/ 60) # 60 attempts
  # get updated log
  local log_updated=$(docker logs ${container})
  # cleanup
  docker_rm ${container}
  docker_rmi ${image}

  # Check no project was found initially
  assert_contains "${log}" "error: DOTNET_STARTUP_PROJECT not found"
  # The build completed succesfully
  assert_contains "${log_updated}" "Running application..."
  # Check app was launched succesfully after uploading sources.
  assert_equal "${response}" "Hello World!"
}

test_devmode() {
  test_devmode_user
  test_devmode_change
}

docker_run_certificatecount()
{
  local app=certificatecount

  # build image
  local image=$(s2i_build ${app} "$@")
  local output=$(docker_run ${image})
  # cleanup
  docker_rmi ${image}

  echo $output | awk '{print $NF}'
}

test_certificates() {
  test_start

  local default_count=$(docker_run_certificatecount)
  # It is unlikely to have less than 100 certificates.
  if [ "$default_count" -lt 100 ]; then
    error "Default number of certificates is too low: '${default_count}'"
    exit 1
  fi

  # DOTNET_SSL_DIRS=/doesntexist
  # We add a non existing directory, which must be ingored.
  local default_count_with_nonexist=$(docker_run_certificatecount -e DOTNET_SSL_DIRS=/doesntexist)
  assert_equal "$default_count" "$default_count_with_nonexist"

  # DOTNET_SSL_DIRS=/doesntexist certdir1 certdir2 certdir3/cert.pem
  # - /doesntexist      : ignored
  # - certdir1          : contains 1 certificate in 1 file
  # - certdir2          : contains 2 certificates in 1 file
  # - certdir3/cert.pem : file containing 1 certificate
  # DOTNET_RM_SRC=true to check these certificates are copied outside the src folder.
  local count_with_additional=$(docker_run_certificatecount -e DOTNET_SSL_DIRS='/doesntexist certdir1 certdir2 certdir3/cert.pem')
  assert_equal "$count_with_additional" "$(($default_count + 4))"
}

test_aspnet_implicit_using_latest()
{
  test_start

  # aspnetcoreimplicitversion contains a versionless reference
  # to the Microsoft.AspNetCore.{App,All} packages.
  # after the build, the assemble script prints out the resolved versions.
  local app=aspnetcoreimplicitversion
  local image=$(s2i_image_tag ${app})

  # verify the versionless references resolved to the latest version.
  # build image
  local s2i_build=$(s2i_build_output_log ${app} ${image})
  # cleanup
  docker_rmi ${image}

  assert_contains "${s2i_build}" '"Microsoft.AspNetCore.All": "'${aspnet_latest_all_version}'"'
  assert_contains "${s2i_build}" '"Microsoft.AspNetCore.App": "'${aspnet_latest_app_version}'"'

  # verify aspnet_latest_{app,all}_version have the correct values.
  # If this fails, the variables in the test and environment variables in the Dockerfiles must be updated.
  if [ "$sdk_version" == "$sdk_latest_version" -a "$BUILD_CENTOS" != "true" ]; then
    info verifying aspnet_latest_{app,all}

    # build image
    s2i_build=$(s2i_build_output_log ${app} ${image} -e LatestPatchVersionForAspNetCoreApp2_2='' -e LatestPatchVersionForAspNetCoreAll2_2='')
    # cleanup
    docker_rmi ${image}

    assert_contains "${s2i_build}" '"Microsoft.AspNetCore.All": "'${aspnet_latest_all_version}'"'
    assert_contains "${s2i_build}" '"Microsoft.AspNetCore.App": "'${aspnet_latest_app_version}'"'
  fi
}

test_binary()
{
  test_start

  # precompiled contains 2 pre-compiled .net console applications
  # console.dll: prints out "Hello World!"
  # world2/console.dll: prints out "Hello World2!"
  local app=precompiled

  # verify the console.dll entry point assembly is detected and ran
  local image=$(s2i_build ${app})
  local output=$(docker_run ${image})
  docker_rmi ${image}
  assert_contains "${output}" "Hello World!"

  # verify we can run world2/console.dll by setting DOTNET_STARTUP_ASSEMBLY
  image=$(s2i_build ${app} -e DOTNET_STARTUP_ASSEMBLY=world2/console.dll)
  output=$(docker_run ${image})
  docker_rmi ${image}
  assert_contains "${output}" "Hello World2!"
}

info "Testing ${IMAGE_NAME}"

if [ ${OPENSHIFT_ONLY} != true ]; then
  test_image
  for sdk_version in "${sdk_versions[@]}"
  do
    info "sdk ${sdk_version}:"
    test_config
    test_usage
    test_s2i_sdk_version $sdk_version
    test_aspnet_implicit_using_latest
    test_consoleapp
    test_multiframework
    test_fsharp
    test_vb
    test_published_files
    test_aspnetapp
    test_devmode
    test_split_build
    test_templates
    test_user
    test_certificates
    test_binary
  done
  # when unset, default to the lowest sdk version
  info "default sdk(${sdk_default_version}):"
  sdk_version="" test_s2i_sdk_version $sdk_default_version
  # when set to 'latest', use the higest sdk version
  info "latest sdk(${sdk_latest_version}):"
  sdk_version="latest" test_s2i_sdk_version $sdk_latest_version
else
  test_imagestream_sample
fi

info "All tests finished successfully."
