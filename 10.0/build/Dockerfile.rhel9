FROM ubi9/dotnet-100-aspnet
# This image provides a .NET 10.0 environment you can use to run your .NET
# applications.

# DOTNET_SDK_VERSION must be set to the full SDK version, unless IS_CI is set to true.
ARG DOTNET_SDK_VERSION=10.0
ARG IS_CI
ARG DOTNET_TARBALL

# Expose the port in case the SDK image is used as a base image through s2i.
EXPOSE 8080

ENV \
    # Add s2i bin dirs and .NET tools dir to PATH
    PATH=/opt/app-root/.dotnet/tools:/opt/app-root/src/.local/bin:/opt/app-root/src/bin:/opt/app-root/bin:${PATH} \
    # S2I
    STI_SCRIPTS_PATH=/usr/libexec/s2i \
    DOTNET_APP_PATH=/opt/app-root/app \
    DOTNET_DEFAULT_CMD=default-cmd.sh \
    # Don't generate a developer certificate
    DOTNET_GENERATE_ASPNET_CERTIFICATE=false \
    # Don't download/extract docs for nuget packages
    NUGET_XMLDOC_MODE=skip \
    # This skips the first time running text
    DOTNET_NOLOGO=true \
    # Needed for the `dotnet watch` to detect changes in a container
    DOTNET_USE_POLLING_FILE_WATCHER=true \
    # Like Microsoft images, provide the SDK version
    DOTNET_SDK_VERSION=$DOTNET_SDK_VERSION

LABEL io.k8s.description="Platform for building and running .NET 10 applications" \
      io.k8s.display-name=".NET 10 SDK" \
      io.openshift.tags="builder,.net,dotnet,dotnetcore,dotnet-100" \
      io.openshift.s2i.scripts-url=image:///usr/libexec/s2i \
      io.s2i.scripts-url=image:///usr/libexec/s2i

# Labels consumed by Red Hat build service
LABEL name="ubi9/dotnet-100" \
      description="Platform for building and running .NET 10 applications" \
      summary=".NET 10 SDK" \
      com.redhat.component="dotnet-100-container" \
      com.redhat.license_terms="https://www.redhat.com/en/about/red-hat-end-user-license-agreements#UBI" \
      dotnet_sdk_version="$DOTNET_SDK_VERSION"

# Switch to root for package installs
USER 0
# Don't let root clutter the app user's HOME
ENV HOME=

# Helper scripts the user can call
COPY ./root/usr/bin /usr/bin

# Copy the S2I scripts from the specific language image to $STI_SCRIPTS_PATH.
COPY ./s2i/bin/ /usr/libexec/s2i

# Install packages:
# - dotnet-sdk--*: provides the .NET SDK.
# - procps-ng: provides 'pidof' which is needed by the 'odo' Devfile to find the running 'dotnet' process.
# - findutils: provides 'find' which is used by the 'fix-permissions' script.
RUN [ -n "${DOTNET_TARBALL}" ] || ( \
    INSTALL_PKGS="dotnet-sdk-10.0 procps-ng findutils" && \
    microdnf install -y --setopt=tsflags=nodocs --setopt=install_weak_deps=0 $INSTALL_PKGS && \
    microdnf clean all -y && \
# yum cache files may still exist (and quite large in size)
    rm -rf /var/cache/yum/* )
# Tarball install (in the runtime base image)
RUN [ -z "${DOTNET_TARBALL}" ] || ( \
    INSTALL_PKGS="procps-ng findutils" && \
    microdnf install -y --setopt=tsflags=nodocs --setopt=install_weak_deps=0 $INSTALL_PKGS && \
    microdnf clean all -y && \
# yum cache files may still exist (and quite large in size)
    rm -rf /var/cache/yum/* )

# Check the versions of the environment variables match the installed versions.
RUN [ "$IS_CI" == "true" ] || ( \
        printf "Checking framework versions ${DOTNET_VERSION} and ${ASPNET_VERSION} against:\n$(dotnet --list-runtimes)" && \
        dotnet --list-runtimes | grep "Microsoft.NETCore.App ${DOTNET_VERSION} " && \
        dotnet --list-runtimes | grep "Microsoft.AspNetCore.App ${ASPNET_VERSION} " && \
        printf "Checking SDK version ${DOTNET_SDK_VERSION} against:\n$(dotnet --list-sdks)" && \
        dotnet --list-sdks | grep "^${DOTNET_SDK_VERSION} " )

# Build the container tool.
RUN /usr/libexec/s2i/container-tool build-tool

# Run as the s2i assemble user
USER $APP_UID
# Set HOME for the random uid that runs the s2i app on OpenShift
ENV HOME=/opt/app-root

# Create s2i directories used for sources and published app
RUN mkdir -p /opt/app-root/src ${DOTNET_APP_PATH}

# Trigger first run to create .NET SDK dirs and config files under $HOME.
RUN dotnet help

# Fix permissions on HOME for the random uid that runs the s2i app on OpenShift
RUN fix-permissions /opt/app-root

# Use the s2i dir for sources as the working dir
WORKDIR /opt/app-root/src
