#!/bin/bash
#
# The 'run' script performs simple tests that verifies usability
# of the image
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed. It may be a
# short image name such as 'foobar', or it may be a fully qualified name in the
# form of example.com/project/repository/image@sha256:hashinhex
#
# TEST_PORT specifies the port on the docker host to be used for testing.
# The container application will still use 8080, but this port will be bound
# to the running container when testing asp.net projects.
#
# DEBUG environment variable, if not empty, makes 'run' to log every step
# of testing.
#
# STOP_ON_ERROR determines if the tests should exit on encountering
# the first error, or keep going and list all failed tests at the end.
# Defaults to 'true', can be set to 'false'.
#
# SKIP_VERSION_CHECK environment variable, if 'true', versions are not checked.
#
# Example usage: $ sudo ./test/run


STOP_ON_ERROR=${STOP_ON_ERROR:-true}

IMAGE_OS=${IMAGE_OS:-RHEL9}

IMAGE_NAME=${IMAGE_NAME:-localhost/ubi9/dotnet-100-aspnet}
OPENSHIFT_ONLY=${OPENSHIFT_ONLY:-false}

test_dir="$(readlink -f "$(dirname "${BASH_SOURCE[0]}")")"
source "${test_dir}/testcommon"

dotnet_version_series="10.0"

test_envvars() {
  test_start

  # Like Microsoft images, we set set ASPNET_VERSION.
  # Its value gets checked during the build.
  # This is to ensure they are provided as environment variables.
  assert_contains $(docker_get_env $IMAGE_NAME ASPNET_VERSION) "$dotnet_version_series"
}

verify_aspnet_image_works() {
  local image=$1

  # start container
  local container=$(docker_run_d ${image})

  # request
  local url=$(container_url ${container})
  local response=$(curl_retry ${url})

  # cleanup
  docker_rm ${container}
  docker_rmi ${image}

  # assert
  assert_equal "${response}" "Hello World!"
}

test_aspnet() {
  test_start

  pushd ${test_dir}/aspnet-hello-world >/dev/null

  # create image
  cat >Dockerfile <<EOF
FROM ${IMAGE_NAME}
ADD app.tar.gz .
CMD [ "dotnet", "aspnet-hello-world.dll" ]
EOF
  local image=$(docker_build .)

  verify_aspnet_image_works $image

  popd >/dev/null
}

info "Testing ${IMAGE_NAME}"

if [ ${OPENSHIFT_ONLY} != true ]; then
  test_envvars
  test_aspnet
fi

if [ "$STOP_ON_ERROR" != "true" ]; then
  failures=(${TEST_FAILURES})
  if [ ${#failures[@]} -gt 0 ]; then
    echo "[ERROR] Tests failed: ${#failures[@]}"
    for item in ${failures[@]}; do
      echo "  ${item}"
    done
    exit 1
  fi
fi

info "All tests finished successfully."
